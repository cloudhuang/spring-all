<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="why-Spring Data-Document">
  <title>Why Spring Data - Document?</title>

  <para>The Spring Framework is the leading full-stack Java/JEE application
  framework. It provides a lightweight container and a non-invasive
  programming model enabled by the use of dependency injection, AOP, and
  portable service abstractions.</para>

  <para><ulink url="http://en.wikipedia.org/wiki/NoSQL">NoSQL</ulink> storages
  provide an alternative to classical RDBMS for horizontal scalability and
  speed. In terms of implementation, Document stores represent one of the most
  popular types of stores in the NoSQL space. The document database supported
  by Spring Data are MongoDB and CouchDB, though just MongoDB integration has
  been released to date.</para>

  <para>The goal of the Spring Data Document (or DATADOC) framework is to
  provide an extension to the Spring programming model that supports writing
  applications that use Document databases. The Spring framework has always
  promoted a POJO programming model with a strong emphasis on portability and
  productivity. These values are caried over into Spring Data Document.
  </para>

  <para>Notable features that are used in Spring Data Document from the Spring
  framework are the Features that particular, features from the Spring
  framework that are used are the Conversion Service, JMX Exporters, portable
  Data Access Exception hierarchy, Spring Expression Language, and Java based
  IoC container configuration. The programming model follows the familiar
  Spring 'template' style, so if you are familar with Spring template classes
  such as JdbcTemplate, JmsTemplate, RestTemplate, you will feel right at
  home. For example, MongoTemplate removes much of the boilerplate code you
  would have to write when using the MongoDB driver to save POJOs as well as a
  rich java based query interface to retrieve POJOs. The programming model
  also offers a new Repository approach in which the Spring container will
  provide an implementation of a Repository based soley off an interface
  definition which can also include custom finder methods.</para>
</chapter>
