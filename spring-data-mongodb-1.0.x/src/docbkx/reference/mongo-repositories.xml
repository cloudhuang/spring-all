<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="mongo.repositories">
  <title>MongoDB repositories</title>

  <section id="mongo-repo-intro">
    <title>Introduction</title>

    <para>This chapter will point out the specialties for repository support
    for MongoDB. This builds on the core repository support explained in <xref
    linkend="repositories" />. So make sure you've got a sound understanding
    of the basic concepts explained there.</para>
  </section>

  <section id="mongo-repo-usage">
    <title>Usage</title>

    <para>To access domain entities stored in a MongoDB you can leverage our
    sophisticated repository support that eases implementing those quite
    significantly. To do so, simply create an interface for your
    repository:</para>

    <example>
      <title>Sample Person entity</title>

      <programlisting language="java">public class Person {

  @Id
  private String id;
  private String firstname;
  private String lastname;
  private Address address;

  // â€¦ getters and setters omitted
}
    </programlisting>
    </example>

    <para>We have a quite simple domain object here. Note that it has a
    property named <code>id</code> of type<classname>ObjectId</classname>. The
    default serialization mechanism used in
    <classname>MongoTemplate</classname> (which is backing the repository
    support) regards properties named id as document id. Currently we
    support<classname>String</classname>, <classname>ObjectId</classname> and
    <classname>BigInteger</classname> as id-types.</para>

    <example>
      <title>Basic repository interface to persist Person entities</title>

      <programlisting>public interface PersonRepository extends PagingAndSortingRepository&lt;Person, Long&gt; {

  // additional custom finder methods go here
}
    </programlisting>
    </example>

    <para>Right now this interface simply serves typing purposes but we will
    add additional methods to it later. In your Spring configuration simply
    add</para>

    <example>
      <title>General MongoDB repository Spring configuration</title>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:mongo="http://www.springframework.org/schema/data/mongo"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd"&gt;

  &lt;mongo:mongo id="mongo" /&gt;
  
  &lt;bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"&gt;
    &lt;constructor-arg ref="mongo" /&gt;
    &lt;constructor-arg value="databaseName" /&gt;
  &lt;/bean&gt;

  &lt;mongo:repositories base-package="com.acme.*.repositories" /&gt;

&lt;/beans&gt;</programlisting>
    </example>

    <para>This namespace element will cause the base packages to be scanned
    for interfaces extending <interfacename>MongoRepository</interfacename>
    and create Spring beans for each of them found. By default the
    repositories will get a <classname>MongoTemplate</classname> Spring bean
    wired that is called <code>mongoTemplate</code>, so you only need to
    configure <code>mongo-template-ref</code> explicitly if you deviate from
    this convention.</para>

    <para>As our domain repository extends
    <interfacename>PagingAndSortingRepository</interfacename> it provides you
    with CRUD operations as well as methods for paginated and sorted access to
    the entities. Working with the repository instance is just a matter of
    dependency injecting it into a client. So accessing the second page of
    <classname>Person</classname>s at a page size of 10 would simply look
    something like this:</para>

    <example>
      <title>Paging access to Person entities</title>

      <programlisting language="java">@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration
public class PersonRepositoryTests {

    @Autowired PersonRepository repository;

    @Test
    public void readsFirstPageCorrectly() {

      Page&lt;Person&gt; persons = repository.findAll(new PageRequest(0, 10));
      assertThat(persons.isFirstPage(), is(true));
    }
}    </programlisting>
    </example>

    <para>The sample creates an application context with Spring's unit test
    support which will perform annotation based dependency injection into test
    cases. Inside the test method we simply use the repository to query the
    datastore. We hand the repository a <classname>PageRequest</classname>
    instance that requests the first page of persons at a page size of
    10.</para>
  </section>

  <section id="mongodb.repositories.queries">
    <title>Query methods</title>

    <para>Most of the data access operations you usually trigger on a
    repository result a query being executed against the MongoDB databases.
    Defining such a query is just a matter of declaring a method on the
    repository interface</para>

    <example>
      <title>PersonRepository with query methods</title>

      <programlisting language="java">public interface PersonRepository extends PagingAndSortingRepository&lt;Person, String&gt; {

    List&lt;Person&gt; findByLastname(String lastname);

    Page&lt;Person&gt; findByFirstname(String firstname, Pageable pageable);

    Person findByShippingAddresses(Address address);

}     </programlisting>
    </example>

    <para>The first method shows a query for all people with the given
    lastname. The query will be derived parsing the method name for
    constraints which can be concatenated with <literal>And</literal> and
    <literal>Or</literal>. Thus the method name will result in a query
    expression of<code>{"lastname" : lastname}</code>. The second example
    shows how pagination is applied to a query. Just equip your method
    signature with a <interfacename>Pageable</interfacename> parameter and let
    the method return a <interfacename>Page</interfacename> instance and we
    will automatically page the query accordingly. The third examples shows
    that you can query based on properties which are not a primitive
    type.</para>

    <note>
      <para>Note that for version 1.0 we currently don't support referring to
      parameters that are mapped as <classname>DBRef</classname> in the domain
      class.</para>
    </note>

    <para><table>
        <title>Supported keywords for query methods</title>

        <tgroup cols="3">
          <colspec colwidth="1*" />

          <colspec colwidth="2*" />

          <colspec colwidth="2*" />

          <thead>
            <row>
              <entry>Keyword</entry>

              <entry>Sample</entry>

              <entry>Logical result</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><literal>GreaterThan</literal></entry>

              <entry><methodname>findByAgeGreaterThan(int
              age)</methodname></entry>

              <entry><code>{"age" : {"$gt" : age}}</code></entry>
            </row>

            <row>
              <entry><literal>LessThan</literal></entry>

              <entry><methodname>findByAgeLessThan(int
              age)</methodname></entry>

              <entry><code>{"age" : {"$lt" : age}}</code></entry>
            </row>

            <row>
              <entry><literal>Between</literal></entry>

              <entry><methodname>findByAgeBetween(int from, int
              to)</methodname></entry>

              <entry><code>{"age" : {"$gt" : from, "$lt" : to}}</code></entry>
            </row>

            <row>
              <entry><literal>IsNotNull</literal>,
              <literal>NotNull</literal></entry>

              <entry><methodname>findByFirstnameNotNull()</methodname></entry>

              <entry><code>{"age" : {"$ne" : null}}</code></entry>
            </row>

            <row>
              <entry><literal>IsNull</literal>,
              <literal>Null</literal></entry>

              <entry><methodname>findByFirstnameNull()</methodname></entry>

              <entry><code>{"age" : null}</code></entry>
            </row>

            <row>
              <entry><literal>Like</literal></entry>

              <entry><methodname>findByFirstnameLike(String
              name)</methodname></entry>

              <entry><code>{"age" : age}</code> ( <varname>age</varname> as
              regex)</entry>
            </row>

            <row>
              <entry><literal>Regex</literal></entry>

              <entry><methodname>findByFirstnameRegex(String
              firstname)</methodname></entry>

              <entry><code>{"firstname" : {"$regex" : firstname
              }}</code></entry>
            </row>

            <row>
              <entry>(No keyword)</entry>

              <entry><methodname>findByFirstname(String
              name)</methodname></entry>

              <entry><code>{"age" : name}</code></entry>
            </row>

            <row>
              <entry><literal>Not</literal></entry>

              <entry><methodname>findByFirstnameNot(String
              name)</methodname></entry>

              <entry><code>{"age" : {"$ne" : name}}</code></entry>
            </row>

            <row>
              <entry><literal>Near</literal></entry>

              <entry><methodname>findByLocationNear(Point
              point)</methodname></entry>

              <entry><code>{"location" : {"$near" : [x,y]}}</code></entry>
            </row>

            <row>
              <entry><literal>Within</literal></entry>

              <entry><methodname>findByLocationWithin(Circle
              circle)</methodname></entry>

              <entry><code>{"location" : {"$within" : {"$center" : [ [x, y],
              distance]}}}</code></entry>
            </row>

            <row>
              <entry><literal>Within</literal></entry>

              <entry><methodname>findByLocationWithin(Box
              box)</methodname></entry>

              <entry><code>{"location" : {"$within" : {"$box" : [ [x1, y1],
              x2, y2]}}}True</code></entry>
            </row>

            <row>
              <entry><literal>IsTrue</literal>,
              <literal>True</literal></entry>

              <entry><code>findByActiveIsTrue()</code></entry>

              <entry><code>{"active" : true}</code></entry>
            </row>

            <row>
              <entry><literal>IsFalse</literal>,
              <literal>False</literal></entry>

              <entry><code>findByActiveIsFalse()</code></entry>

              <entry><code>{"active" : false}</code></entry>
            </row>

            <row>
              <entry><literal>Exists</literal></entry>

              <entry><methodname>findByLocationExists(boolean
              exists)</methodname></entry>

              <entry><code>{"location" : {"$exists" : exists }}</code></entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>

    <section>
      <title>Geo-spatial repository queries</title>

      <para>As you've just seen there are a few keywords triggering
      geo-spatial operations within a MongoDB query. The <code>Near</code>
      keyword allows some further modification. Let's have look at some
      examples:</para>

      <example>
        <title>Advanced <code>Near</code> queries</title>

        <programlisting language="java">public interface PersonRepository extends MongoRepository&lt;Person, String&gt;

  // { 'location' : { '$near' : [point.x, point.y], '$maxDistance' : distance}}
  List&lt;Person&gt; findByLocationNear(Point location, Distance distance);
}</programlisting>
      </example>

      <para>Adding a <classname>Distance</classname> parameter to the query
      method allows restricting results to those within the given distance. If
      the <classname>Distance</classname> was set up containing a
      <interfacename>Metric</interfacename> we will transparently use
      <code>$nearSphere</code> instead of $code.</para>

      <example>
        <title>Using <code>Distance</code> with <code>Metrics</code></title>

        <programlisting language="java">Point point = new Point(43.7, 48.8);
Distance distance = new Distance(200, Metrics.KILOMETERS);
â€¦ = repository.findByLocationNear(point, distance);
// {'location' : {'$nearSphere' : [43.7, 48.8], '$maxDistance' : 0.03135711885774796}}</programlisting>
      </example>

      <para>As you can see using a <classname>Distance</classname> equipped
      with a <interfacename>Metric</interfacename> causes
      <code>$nearSphere</code> clause to be added instead of a plain
      <code>$near</code>. Beyond that the actual distance gets calculated
      according to the <classname>Metrics</classname> used.</para>

      <simplesect>
        <title>Geo-near queries</title>

        <para></para>

        <programlisting language="java">public interface PersonRepository extends MongoRepository&lt;Person, String&gt;

  // {'geoNear' : 'location', 'near' : [x, y] }
  GeoResults&lt;Person&gt; findByLocationNear(Point location);

  // No metric: {'geoNear' : 'person', 'near' : [x, y], maxDistance : distance }
  // Metric: {'geoNear' : 'person', 'near' : [x, y], 'maxDistance' : distance, 
  //          'distanceMultiplier' : metric.multiplier, 'spherical' : true }
  GeoResults&lt;Person&gt; findByLocationNear(Point location, Distance distance);

  // {'geoNear' : 'location', 'near' : [x, y] }
  GeoResults&lt;Person&gt; findByLocationNear(Point location);
}</programlisting>
      </simplesect>
    </section>

    <section>
      <title>MongoDB JSON based query methods and field restriction</title>

      <para>By adding the annotation
      <classname>org.springframework.data.mongodb.repository.Query</classname>
      repository finder methods you can specify a MongoDB JSON query string to
      use instead of having the query derived from the method name. For
      example</para>

      <programlisting language="java">public interface PersonRepository extends MongoRepository&lt;Person, String&gt;

  @Query("{ 'firstname' : ?0 }")
  List&lt;Person&gt; findByThePersonsFirstname(String firstname);

}</programlisting>

      <para>The placeholder ?0 lets you substitute the value from the method
      arguments into the JSON query string.</para>

      <para>You can also use the filter property to restrict the set of
      properties that will be mapped into the Java object. For example,</para>

      <programlisting language="java">public interface PersonRepository extends MongoRepository&lt;Person, String&gt;

  @Query(value="{ 'firstname' : ?0 }", fields="{ 'firstname' : 1, 'lastname' : 1}")
  List&lt;Person&gt; findByThePersonsFirstname(String firstname);

}</programlisting>

      <para>This will return only the firstname, lastname and Id properties of
      the Person objects. The age property, a java.lang.Integer, will not be
      set and its value will therefore be null.</para>
    </section>

    <section>
      <title>Type-safe Query methods</title>

      <para>MongoDB repository support integrates with the <ulink
      url="http://www.querydsl.com/">QueryDSL</ulink> project which provides a
      means to perform type-safe queries in Java. To quote from the project
      description, "Instead of writing queries as inline strings or
      externalizing them into XML files they are constructed via a fluent
      API." It provides the following features</para>

      <itemizedlist>
        <listitem>
          <para>Code completion in IDE (all properties, methods and operations
          can be expanded in your favorite Java IDE)</para>
        </listitem>

        <listitem>
          <para>Almost no syntactically invalid queries allowed (type-safe on
          all levels)</para>
        </listitem>

        <listitem>
          <para>Domain types and properties can be referenced safely (no
          Strings involved!)</para>
        </listitem>

        <listitem>
          <para>Adopts better to refactoring changes in domain types</para>
        </listitem>

        <listitem>
          <para>Incremental query definition is easier</para>
        </listitem>
      </itemizedlist>

      <para>Please refer to the QueryDSL documentation which describes how to
      bootstrap your environment for APT based code generation <ulink
      url="http://source.mysema.com/static/querydsl/2.1.2/reference/html/ch02.html#d0e112">using
      Maven</ulink> or <ulink
      url="http://source.mysema.com/static/querydsl/2.1.2/reference/html/ch02.html#d0e131">using
      Ant</ulink>.</para>

      <para>Using QueryDSL you will be able to write queries as shown
      below</para>

      <programlisting language="java">QPerson person = new QPerson("person");
List&lt;Person&gt; result = repository.findAll(person.address.zipCode.eq("C0123"));

Page&lt;Person&gt; page = repository.findAll(person.lastname.contains("a"), 
                                       new PageRequest(0, 2, Direction.ASC, "lastname"));</programlisting>

      <para><classname>QPerson</classname> is a class that is generated (via
      the Java annotation post processing tool) which is a
      <classname>Predicate</classname> that allows you to write type safe
      queries. Notice that there are no strings in the query other than the
      value "C0123".</para>

      <para>You can use the generated <classname>Predicate</classname> class
      via the interface
      <interfacename>QueryDslPredicateExecutor</interfacename> which is shown
      below</para>

      <programlisting language="java">public interface QueryDslPredicateExecutor&lt;T&gt; {

  T findOne(Predicate predicate);

  List&lt;T&gt; findAll(Predicate predicate);

  List&lt;T&gt; findAll(Predicate predicate, OrderSpecifier&lt;?&gt;... orders);

  Page&lt;T&gt; findAll(Predicate predicate, Pageable pageable);

  Long count(Predicate predicate);
}
</programlisting>

      <para>To use this in your repository implementation, simply inherit from
      it in additiion to other repository interfaces. This is shown
      below</para>

      <programlisting lang="" language="java">public interface PersonRepository extends MongoRepository&lt;Person, String&gt;, QueryDslPredicateExecutor&lt;Person&gt; {

   // additional finder methods go here

}</programlisting>

      <para>We think you will find this an extremely powerful tool for writing
      MongoDB queries.</para>
    </section>
  </section>
</chapter>